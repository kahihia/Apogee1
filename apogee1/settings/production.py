# this is the settings file we're using for the 
"""
Django settings for apogee1 project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from decouple import config
import dj_database_url
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# points us back to the root folder, where manage.py is
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#HEROKU
SECRET_KEY = config('SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
# shows debug messages in the page 
#HEROKU 
#DEBUG = True
DEBUG = config('DEBUG', default=False, cast=bool)
ALLOWED_HOSTS = [config('DJANGO_ALLOWED_HOSTS')]

#'apogee1.herokuapp.com',
AWS_QUERYSTRING_AUTH = False
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('S3_BUCKET_NAME')
MEDIA_URL = 'http://%s.s3.amazonaws.com/' % AWS_STORAGE_BUCKET_NAME
DEFAULT_FILE_STORAGE = "storages.backends.s3boto.S3BotoStorage"
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_S3_REGION_NAME = config('REGION_NAME')

SECURE_SSL_REDIRECT=config("SSL_EVERYWHERE", default=True)
if config("SSL_EVERYWHERE", default=True):
    protcol = 'https'
else:
    protcol = 'http'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', protcol)
ASGI_APPLICATION = "apogee1.routing.application"
WSGI_APPLICATION = 'apogee1.wsgi.application'

SERVER_EMAIL = "Granite <support@mail.granite.gg>"
DEFAULT_FROM_EMAIL = "Granite <support@mail.granite.gg>"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [config('REDIS_URL')],
        },
    },
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #add django captcha here
    # these are our custom apps
    'parties',
    'accounts',
    'hashtags',
    'bids',
    'notifications',
    'userstatistics',
    'event_payment',
    'payout',
    'eventmessages',

    # third party stuff
    'crispy_forms',
    'rest_framework',
    'storages',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # from django docs for setting the current session timezone
    'apogee1.timezone.TimezoneMiddleware'
]

# root url sets the main routing file. those then refer to the other url docs
ROOT_URLCONF = 'apogee1.urls'

# because login is built into django
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL

# Address of RabbitMQ instance, our Celery broker
#CELERY_BROKER_URL = 'amqp://localhost'
CELERY_BROKER_URL=config('REDIS_URL')
CELERY_BROKER_POOL_LIMIT = 8

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # this tells us where our html is coming from 
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'apogee1.context_processors.configs',
            ],
        },
    },
]

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
#HEROKU
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'apogeetestdb',
#         'USER': 'caldwell',
#         'PASSWORD': 'apogeedb',
#         # 'NAME': 'mydb',
#         # 'USER': 'me',
#         # 'PASSWORD': 'pass',
#         'HOST': 'localhost',
#         'PORT': '',
#     }
# }
DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL', default='postgres://localhost'), 
        engine='django_postgrespool'
    )
}

DATABASE_POOL_ARGS = {
    'max_overflow': 10,
    'pool_size': 10,
    'recycle': 300
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

TIME_ZONE = "America/New_York"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
# sets the base url for our static serve
# it's currently local, but if we used AWS or something, we would send it there
STATIC_URL = '/static/'

# where our static files exist at the start
# will not be served, just long term storage
STATICFILES_DIRS = [
# BASE_DIR is the root of the django project
    os.path.join(BASE_DIR, "static-storage"),
]

# tells us where the static files exist at the end
# in production, this should be done by a cdn, not django
# will be served
STATIC_ROOT = os.path.join(BASE_DIR, "static-serve")


# this holds our media stuff like thumbnails and profile pics
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
#MEDIA_URL = '/media/'

# this just works with crispy form to render properly
CRISPY_TEMPLATE_PACK = 'bootstrap4'

#django_heroku.settings(locals())



